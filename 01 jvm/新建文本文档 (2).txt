一次编译  到处运行（以jdk为基础）
编译器javac
编译命令 javac xx.java 
-->xx.class,运行这个文件（将这个文件交给jvm来运行）
javac将java语法文件编译为字节码文件，jvm只能运行字节码文件


java8 jvm文档地址 https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.1

用16进制表示内容

常量池：字面量  符号引用（类，接口，字段，方法等名称的描述）

javap指令：反编译指令

类加载
装载：加载字节码


连接：验证 准备 解析
初始化 初始化

类信息存放在方法区


加载后将加载的数据放到数据区（）
方法区（运行时常量池）


堆
虚拟机栈
本地方法栈
pc


堆划分
old  
young(eden+s0+s1)



类文件结构



class文件是一组8位字节为基础的二进制流，各项数据严格按照属性紧凑排列在class文件中，
中间没有任何分隔符
class文件中的数据类型：无符号数和表
无符号数：u1 u2 u3 u4,它们分别表示1个字节，2个字节，4个字节，8个字节的无符号数
表：由无符号数或者其他表作为数据项构成的复合型数据类型，一般以_info结尾

class文件的头4个字节称为魔数，cofebabe,作用是确定当前文件是否是能被虚拟机接收的class文件
紧接着魔数的是class五年的版本号，5,6字节为此版本号，7,8为主版本号
紧接着版本好之后的是常量池，常量池中的数量是不固定的，所以在常量池的入口需要放置一个u2类型的数据，
表示，常量池的容量的值（constant_pool_count）,容量计数是从1开始的，获取常量池容量后，要将值减1就是实际的常量

常量池存放两类常量：字面量，符号引用
字面量：文本字符串，final的常量
符号引用：类和接口的全限定名，字段的名称和描述符，方法名称和描述符


常量池每一项常量都是一个表，表名类似CONSTANT_xx_info
反编译后，根据常量类型，找到对应的常量类型表，根据表结构可以找到对应的
16进制数据，根据这个16十六进制找到对应的ascll码反推出java文件中的内容

访问标志
常量池结束后，紧接着的两个字节代表访问标志，用于识别类或者接口的访问信息，
比如：这个class是类还是接口，是否定义为public类型，是否定义为abstract类型，是否什么为final

字段表集合
用来描述接口或者类中声明的变量，字段包括类变量，实例变量，但不包括方法内部定义的局部变量
一个字段包含的信息：作用域（public，private，protected） 实例变量或者类变量修饰符（static）
可变性（final），并发可见性（volatile），是否序列化transient,字段数据类型，字段名称
方法表集合
方法的描述




