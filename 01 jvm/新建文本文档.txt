为什么Java研发系统需要JVM？
JVM 解释的是类似于汇编语言的字节码，需要一个抽象的运行时环境。同时，这个虚拟环境也需要解决字节码加载、
自动垃圾回收、并发等一系列问题。JVM 其实是一个规范，定义了 .class 文件的结构、加载机制、数据存储、
运行时栈等诸多内容，最常用的 JVM 实现就是 Hotspot

对你JVM的运行原理了解多少？JVM的生命周期是和Java程序的运行一样的，
当程序运行结束，JVM实例也跟着消失了。
JVM处于整个体系中的核心位置，关于其具体运行原理，我们在下面的课...


我们写的 Java 代码到底是如何运行起来的？

一个 Java 程序，首先经过 javac 编译成 .class 文件，然后 JVM 将其加载到`元数据`区，执行引擎将会通过`混合模式`执行这些字节码。
执行时，会翻译成操作系统相关的函数。JVM 作为 .class 文件的黑盒存在，输入字节码，调用操作系统函数。
过程如下：Java 文件->编译器>字节码->JVM->机器码。

我们常说的字符串常量，存放在哪呢？
由于常量池，在 Java 7 之后，放到了堆中，我们创建的字符串，将会在堆上分配。


对于基本类型的包装类也是在栈上分配吗？

包装类属于引用类型，它们不属于基本类型，所以是在堆上分配的。



虚拟机完成3个事情：
1，通过类的权限定名来获取该类的二进制字节流，
2，将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构；
3，在内存中生成一个代表改了的java.lang.Class对象作为方法区这个类的各种数据的访问入口


怎么打破双亲委派模式
1.自定义加载器，重写findClass方法外还重写了loadClass方法，加载自定路径下的类
沿用双亲委派机制自定义类加载器很简单，只需继承ClassLoader类并重写findClass方法即可。
通过findClass方法发现指定的类，但它除了重写findClass方法外还重写了loadClass方法，
默认的loadClass方法是实现了双亲委派机制的逻辑，即会先让父类加载器加载，当无法加载时才由自己加载。
这里为了破坏双亲委派机制必须重写loadClass方法，即这里先尝试交由System类加载器加载，加载失败才会由自己加载。
它并没有优先交给父类加载器，这就打破了双亲委派机制


能够找到 Reference Chain (引用链)的对象，就一定会存活么？


引用关系
强引用：代码中普遍存在的形式：Object obj=new Object();
强引用Strongreferences当内存空间不足，系统撑不住了，JVM就会抛出OutOfMemoryError错误。
即使程序会异常终止，这种对象也不会被回收。这种引用属于最普通最强硬的一种存在，只有在和 GC Roots 断绝关系时，才会被消灭掉。

软引用
用于维护一些可有可无的对象，当内存足够时不会回收，当内存不够时会回收软引用对象，如果软引用对象回收内存还不够那么就会抛出内存溢出
溢出
将创建好的对象传给softreference
Object?object?=?new?Object();
SoftReference<Object>?softRef?=?new?SoftReference(object);通过get方法获取对象
弱引用
是一种更加无用的引用方式，生命周期更短
当垃圾回收时，无论内存是否充足，弱引用关联的对象都会被回收
Object?object?=?new?Object();
WeakReference<Object>?softRef?=?new?WeakReference(object);

弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，
一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。

虚引用
如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被回收
虚引用主要用来跟踪对象被垃圾回收的活动。
当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象之前，把这个虚引用加入到与之关联的引用队列中。

程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动


引起oom的原因
内存的容量太小了，需要扩容，或者需要调整堆的空间

错误的引用方式，发生了内存泄漏。没有及时的切断与 GC Roots 的关系。
比如线程池里的线程，在复用的情况下忘记清理 ThreadLocal 的内容

接口没有进行范围校验，外部传参超出范围。比如数据库查询时的每页条数等

对堆外内存无限制的使用。这种情况一旦发生更加严重，会造成操作系统内存耗尽

JVM 中有哪些垃圾回收算法？它们各自有什么优劣？
标记清理
复制
标记整理
分代


CMS 垃圾回收器是怎么工作的？有哪些阶段？
运作过程：
1初始标记，仅仅是标记GC roots能够关联到的对象，速度很快
2并发标记，进行GC Roots tracing的过程
3重新标记，为并发标记期间因用户程序继续运行而导致标记发送变动的那部分对象进行标记，标记时间比初始时间长，但是比并发标记时间短
4并发清除




服务卡顿的元凶到底是谁？
为了保证程序不会乱套，最好的办法就是暂停用户的一切线程。也就是在这段时间，你是不能 new 对象的，只能等待。
表现在 JVM 上就是短暂的卡顿，什么都干不了。这个头疼的现象，就叫作 Stop the world。简称 STW。
标记阶段，大多数是要 STW 的。如果不暂停用户进程，在标记对象的时候，有可能有其他用户线程会产生一些新的对象和引用，
造成混乱现在的垃圾回收器，都会尽量去减少这个过程。但即使是最先进的 ZGC，也会有短暂的 STW 过程。
我们要做的就是在现有基础设施上，尽量减少 GC 停顿


CMS 中都会有哪些停顿（STW）


初始标记，这部分的停顿时间较短；
MinorGC（可选），在预处理阶段对年轻代的回收，停顿由年轻代决定；
重新标记，由于preclaen阶段的介入，这部分停顿也较短；
Serial-Old 收集老年代的停顿，主要发生在预留空间不足的情况下，时间会持续很长；

Full GC，永久代空间耗尽时的操作，由于会有整理阶段，持续时间较长。


优势：低延迟，尤其对于大堆来说。大部分垃圾回收过程并发执行。
劣势：内存碎片问题。FullGC的整理阶段，会造成较长时间的停顿。需要预留空间，用来分配收集阶段产生的“浮动垃圾”。
使用更多的 CPU 资源，在应用运行的同时进行堆扫描



当年轻代中的 Eden 区分配满的时候，就会触发年轻代的 GC（Minor GC）。具体过程如下：
在 Eden 区执行了第一次 GC 之后，存活的对象会被移动到其中一个 Survivor 分区（以下简称from）；

Eden 区再次 GC，这时会采用复制算法，将 Eden 和 from 区一起清理。存活的对象会被复制到 to 区；接下来，只需要清空 from 区就可以了

分代的话，堆内存可分为年轻代和老年代
年轻代可以分为Eden和servivor2个区域，servivor又可以分为from和to2个区域
minor gc采用的是复制算法
1.第一次gc时，将存活的对象放到servicorfrom中，清理Eden区的对象
2.再次gc，将Eden和from区存活的对象复制到to区中，接下来情况Eden和from
3.将from和to2个区域进行角色转换

老年代
主要是majorgc,当没有足够的连续空间分配给创建的大对象时就会触发major gc来进行垃圾回收
major gc使用的是标记清除算法，耗时较长



-verbose:gc  -XX:+PrintGCDetails   -XX:+PrintGCDateStamps -Xloggc:D:/logs/gc.log  -XX:HeapDumpPath=D:/log

jstack Dump 日志文件中的线程状态
dump 文件里，值得关注的线程状态有：
死锁，Deadlock（重点关注） 
执行中，Runnable   
等待资源，Waiting on condition（重点关注） 
等待获取监视器，Waiting on monitor entry（重点关注）
暂停，Suspended
对象等待中，Object.wait() 或 TIMED_WAITING
阻塞，Blocked（重点关注）  
停止，Parked






Xss可设置栈的大小


springboot自动配置的原理
spring boot启动流程
spring boot启动tomcat  tomcate的属性是怎么赋值的  tomcat是怎么加载的 TomcatServletWebServerFactory

自定义starter

引入mybatis的starter包
starter对应一个MybatisAutoConfiguration，这个类使用@Configuration注解，表示是spring的配置类，在类中定义了相应的bean

在配置文件中配置相关的配置
MybatisAutoConfiguration导入了MybatisProperties这个配置类
这个配置类和配置文件中的配置是一一对应的
mybatis的starter包中的
META-INF/spring.factories文件，在文件中配置了MybatisAutoConfiguration类

@SpringBootApplication注解使用了@EnableAutoConfiguration注解，这个注解
导入了AutoConfigurationImportSelector类,提供了扫描Meta-inf包下面的spring.factories配置文件，加载对应的spring配置类
enableautoconfiguration直接使用了@AutoConfigurationPackage注解，这个注解使用了@Import注解，这个注解加载了
Registry类，用来将配置了加载到spring容器中


通过starter创建指定的bean,加载自定义starter
@SpringBootApplication中包含了@EnableAutoConfiguration注解，将会加载process-》getAutoConfigurationEntry-》getCandidateConfigurations
在这个方法中会扫描Meta-inf包下面的spring.factories配置文件，从配置文件中读取所有的AutoConfiguration类，在AutoConfiguration
类中创建对应组件的bean实例


定义一个properties类用来封装要创建组件的参数，具体的配置就是在resources目录下的application.properties文件中，
在类上使用@ConfigurationProperties(prefix = "tom")，参数prefix指定配置前缀
定义AutoConfiguration类，在类上使用注解
@Configuration
@ConditionalOnClass(MyAuto.class)指定创建的组件，ConditionalOnClass注解是表示当给定的类名在类路径上存在，则实例化当前Bean
@EnableConfigurationProperties(MyAutoProperties.class)
@ConditionalOnProperty(prefix = "tom", value = "enable", matchIfMissing = true)
public class MyAutoConfiguration
{
在类中创建bean
	@Bean
	@ConditionalOnMissingBean
	public MyAuto myAuto(MyAutoProperties myAutoProperties)
	{

		MyAuto myAuto = new MyAuto();
		myAuto.setCode(myAutoProperties.getCode());
		myAuto.setName(myAutoProperties.getName());
		System.out.println("init");
		return myAuto;
	}
}
在resources下创建META-INF文件夹，在文件夹中创建spring.factories文件来配置AutoConfiguration的全类名
MyAutoConfiguration就是一个spring的配置类，找到这个配置类后交给spring来执行bean注解修饰的方法从而来实例化对应的组件

AnnotationConfigServletWebServerApplicationContext
servletwebapplicationcontext


内存结构

垃圾收集器


虚拟机性能监控，性能优化


类加载机制

java对象结构

class文件结构











































