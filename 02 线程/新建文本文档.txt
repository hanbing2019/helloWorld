1.线程基础
线程基本概念

什么是进程：是程序运行的一次活动，是系统进行资源分配和调度的基本单位，是操作系统的结构基础；进程是线程的容器
什么是线程：是操作系统进行运算调度的最小单位，它包含在进程中，是进程中实际运作单位

线程好处
处理器角度
提示多核服务器的处理器资源的利用率，提高吞吐量
编程模型角度
可以把一些复杂的，异步的流程分解为一系列的更加简单的同步流程，他们每个都是在相互独立的线程中运行，只有到达了特定的同步点才进行彼此的交互，
这个通常被应用在一些框架中；比如远程方法调用RMI或者servlet

提示响应角度
当处理某些复杂的业务逻辑时，可以将数据一致性要求不高的操作交给一个线程来处理，这样响应用户请求的线程就能尽快的处理完成，缩短了响应时间，
提示了用户体验

线程存在问题（数据安全，活跃度问题（死锁，活锁，饥饿），性能问题）
线程安全
竞态条件：当程序运行的正确性取决于相对时间或者调度器所控制的多线程交叉时（多线程环境下程序后续运行行为取决于某个共享变量的值），就会发生竞态条件
check-then-act和read-modify-write


线程的中断
线程生命周期

单核处理器上运行多线程

并发
synchronized
线程安全的主要原因是多个线程同时操作共享资源，导致共享资源和运行出现了不可预期的结果
那么就需要一种安全机制来保证，多线程环境下只有一个线程能够访问共享资源，其他线程必须等待这个线程访问结束，才能去获取共享资源
这种方式叫做互斥锁，synchronized关键字可以用在方法或者代码块上，用来保证在同一时刻只有一个线程能够访问它修饰的方法或者代码块，
保证线程对共享变量的排他性和可见性



锁有4种状态，无锁状态，偏向锁，轻量级锁，重量级锁

偏向锁：当锁不存在竞争，而且总是只有一个线程访问同一个锁时，为了减少线程获取锁的开销引入了偏向锁
偏向锁的使用
当一个线程获取锁时，会在Mark word中存储偏向的线程id,锁标志位为01，以后该线程再次进入或者退出同步块时就不需要进行CAS操作来加锁和解锁，
只需要判断Mark word中是否存在指向当前线程的偏向锁，如果有偏向锁id,那么表示线程已经获取了锁，没有的话

CMPXCHG指令


volatile

原子操作CAS（原子操作类12个）

JVM内存模型

AbstractQueuedSynchronizer（AQS）

基于AQS实现的锁ReentrantLock，ReentrantWriteReadLock
NonfairSync


基于AQS实现的同步器

CountDownLatch:运行一个或者多个线程等待其他线程执行完成
主线程等待所有子线程执行完成后才能执行，最简单的就是join方法


cyclicBarrier，Semaphore

同步容器ConcurrentHashMap,ConcurrentLiknedQueued
Fork/Join框架

线程池ThreadPoolExecutor


Executors框架创建的线程池：newFixedThreadPool，newCachedThreadPool，
newSingleThreadExecutor，newScheduledThreadPool，newSingleThreadScheduledExecutor

Future接口callable接口

UNSAFE类


找到当前节点的第一个非取消的前驱节点，然后将当前节点状态设置为CANCELLED
如果当前节点是tail节点，那么就将找到的前驱节点设置为tail节点，然后将前驱节点的next节点设置为null




mysql数据库

基本概念


创建数据库

创建表
创建常规表、临时表，分区表，复制表


添加insert

查询

修改

修改数据，表结构 alter

删除





事务
并发控制

隔离级别


索引
索引结构


查询优化







HTTP：超文本传输协议 (HTTP-Hypertext transfer protocol)，是互联网上应用最为广泛的一种网络协议，是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。

? ? ?HTTP的会出现的问题：http协议属于明文传输协议，交互过程以及数据传输都没有进行加密，通信双方也没有进行任何认证，通信过程非常容易遭遇劫持、监听、篡改，严重情况下，会造成恶意的流量劫持等问题，甚至造成个人隐私泄露（比如银行卡卡号和密码泄露）等严重的安全问题。

HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。现在它被广泛用于万维网上安全敏感的通讯，例如交易支付方面。

? ? HTTPS协议可以分为两种：一是通过建立一个信息安全通道，来保证数据传输的安全；二是通过确认网站的真实性。

HTTPS在HTTP的基础上加入了SSL/TLS协议，依靠SSL证书来验证服务器的身份，并为客户端和服务器端之间建立“SSL加密通道”，确保用户数据在传输过程中处于加密状态，同时防止服务器被钓鱼网站假冒，而HTTP协议无法加密数据，所有通信数据都在网络中明文“裸奔”。通过网络的一些技术手段，就可还原HTTP报文内容。



Apache Kafka实战

那么B tree，是怎样的一种数据结构呢？

? ? ? ?首先B tree是一种m叉的多路平衡树。B树具有这样的特点：

? ? ? ?1.每个节点最多含有m个孩子

? ? ? ?2.根节点含有[2,m]个孩子

? ? ? ?3.非叶子节点含有[[m/2],m]个孩子节点（向上取整的意思）

? ? ? ?4.一个节点如果含有K个关键字，那么它就有k+1个孩子

? ? ? ?5.所有叶子节点都在同一层??

? ? ? ?6.每个节点的K个关键数把节点拆成了K+1段
――――――――――――――――
 B+ tree 是n路查找平衡树。它的特点是：

? ? ?1.有n个关键字的非叶子节点具有n个孩子（B树是n+1），这些关键字不保存数据只是用来索引。最终的数据都在叶子节点上（B树是每个关键字都保存数据）。

? ? ?2.所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接。

? ? 3.所有的非叶子节点可以看作是索引部分，节点关键字仅含其子树中最大最小的部分。

? ?4.同一数字可能在不同节点重复出现，非叶子节点是索引，叶子节点保存数据。
――――――――――――――――
b+树相比于b树的查询优势：

b+树的中间节点不保存数据，所以磁盘页能容纳更多节点元素，更“矮胖”；
b+树查询必须查找到叶子节点，b树只要匹配到即可不用管元素位置，因此b+树查找更稳定（并不慢）；
对于范围查找来说，b+树只需遍历叶子节点链表即可，b树却需要重复地中序遍历。


为什么说B+-tree比B 树更适合实际应用中操作系统的文件索引和数据库索引？

B+tree的磁盘读写代价更低：B+tree的内部结点并没有指向关键字具体信息的指针(红色部分)，因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了；

B+tree的查询效率更加稳定：由于内部结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引，所以，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当；

数据库索引采用B+树而不是B树的主要原因：B+树只要遍历叶子节点就可以实现整棵树的遍历，而且在数据库中基于范围的查询是非常频繁的，而B树只能中序遍历所有节点，效率太低。
――――――――――――――――



