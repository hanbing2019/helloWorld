1.和数据库建立连接
采用半双工的方式连接数据，
半双工：可以双向传送，但是不能同时传送数据
2.查询缓存（5.7版本默认关闭）
没有缓存
3.语法解析和预处理
 MySQL 的 Parser 解析器和 Preprocessor 预处理模块对sql进行校验
 对语句基于 SQL 语法进行词法和语法分析和语义的解析
 解析器解析sql的语法
 预处理器检查表名和列名是否存在
 然后得到解析树
 
4.查询优化，得到执行计划
查询优化器，根据解析树生成不同的执行计划，然后选择最优的执行计划
MySQL 的优化器能处理哪些优化类型呢？
举两个简单的例子：
1、当我们对多张表进行关联查询的时候，以哪个表的数据作为基准表。
2、有多个索引可以使用的时候，选择哪个索引。
优化后得到执行计划，在sql前面加上explain就可以查看sql的执行计划

执行引擎使用执行计划去操作存储引擎来获取查询结构，（也就是调用存储引擎的api）

MySQL 分成三层，跟客户端对接的连接层，真正执行操作的服务层，和跟硬件打交道的存储引擎层



InnoDB 索引底层结构
使用B+Tree
结构推演
1.二分查找，每次把数据缩小一半
在有序的等值查询和范围比较时效率非常高，但是更新时可能会大量的移动数据，只适合静态的数据
2.二叉查找树
左子树值小于右子树，右子树大于父节点，能够实现快速查找和快速插入
但是二叉查找树有一个问题：
就是它的查找耗时是和这棵树的深度相关的，在最坏的情况下时间复杂度会退化成O(n)。
当插入的数据是有序的，那么这课树就被称为斜树，这种情况下达不到快速查找的目的
3.平衡二叉树
左右子树深度差的绝对值不超过1，（通过左旋或者右旋来控制）

索引节点存放的内容
1.索引的键值
2.数据的磁盘地址
3.子树的引用

mysql的存储结构分为5级：表，段，簇（区），页，行
InnoDB操作磁盘的最小的单位是一页，大小是16k，也就是说树节点的大小就是16k
如果我们一个节点只存一个键值+数据+引用，例如整形的字段，可能只用了十几个
或者几十个字节，它远远达不到 16K 的容量，所以访问一个树节点，进行一次 IO 的时候，
浪费了大量的空间。

解决方案
1.每个节点多存放一些数据
2.每个节点可以有更多的分支，分支越多，树的深度就会减少（根节点为0）

4.多路平衡查找树（B tree）
树子节点和叶子节点存储键值，数据地址，节点引用
它有一个特点：分叉数比关键字数多1

5.B+tree
键值数和路数相等
根节点和树枝节点不存数据，只有叶子节点才存放数据
每个叶子节点都有一个指向相邻叶子节点的指针，最后一个数据节点会指向第一个节点，形成一个有序的链表
它是根据左闭右开的区间 [ )来检索数据。

总结一下，InnoDB 中的 B+Tree 的特点：
1)它是 B Tree 的变种，B Tree 能解决的问题，它都能解决。B Tree 解决的两大问题
是什么？（每个节点存储更多关键字；路数更多）
2)扫库、扫表能力更强（如果我们要对表进行全表扫描，只需要遍历叶子节点就可以
了，不需要遍历整棵 B+Tree 拿到所有的数据）
3) B+Tree 的磁盘读写能力相对于 B Tree 来说更强（根节点和枝节点不保存数据区，
所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多）
4)排序能力更强（因为叶子节点上有下一个数据区的指针，数据形成了链表）
5)效率更加稳定（B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的）

为什么不用红黑树？
1、只有两路；
2、不够平衡。红黑树一般只放在内存里面用。例如 Java 的 TreeMap。


hash索引
根据索引字段生成hash码和指针，指向数据；

hash索引的特点
时间复杂度o(1),查询速度快；hash索引存储的数据不是按顺序存储的，所以不能排序
在查询数据的时候要根据键值计算哈希码，所以它只能支持等值查询（= IN），不支持范围查询（> < >= <= between and）
就是如果字段重复值很多的时候，会出现大量的哈希冲突（采用拉链法解决），效率会降低

InnoDB存储引擎创建表后会生成2个文件，frm,ibd
ibd存放数据和索引
InnoDB 只有一个文件（.ibd 文件），那索引放在哪里呢？
在 InnoDB 里面，它是以主键为索引来组织数据的存储的，所以索引文件和数据文
件是同一个文件，都在.ibd 文件里面。
在 InnoDB 的主键索引的叶子节点上，它直接存储了我们的数据。

myisam生成3个文件,frm，
myd存放数据
myi存放索引
MyISAM 的 B+Tree 里面，叶子节点存储的是数据文件对应的磁盘地址。所以从索
引文件.MYI 中找到键值后，会到数据文件.MYD 中获取相应的数据记录

这里是主键索引，如果是辅助索引，有什么不一样呢？
在 MyISAM 里面，辅助索引也在这个.MYI 文件里面。
辅助索引跟主键索引存储和检索数据的方式是没有任何区别的，一样是在索引文件
里面找到磁盘地址，然后到数据文件里面获取数据


为什么使用B+tree
1.
















